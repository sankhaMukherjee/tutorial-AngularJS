{"name":"Tutorial-angularjs","tagline":"","body":"# Rapid prototyping of systems for visual display\r\n\r\nOftentimes, it is necessary to monitor certain processes on a regular basis. The ideas are the same.\r\n\r\n - pull data from one or several sources. \r\n - do some computation in the data\r\n - display the data in a meaningful manner\r\n - repeat every second/minute/hour or whatevery interval of time is a meaningful estimate. \r\n\r\nOf course, there are always someone you can pay to do the task. However, did you know that you (yes *you*!) can rig up a rudimentary monitoring system within a few hours? In the time it will take you to speak with the IT guy and explain to him/her what it is that you exactly want, you can have a system up and running. If you have a barebones framework already written, that comes down to a few minutes. \r\n\r\nIn this tutorial, we shall be using some fine libraries to accomplish just that. By *fine* I mean free. And easy. \r\n\r\nAt this point I expect you to have a passing familiarity with both Python and javascript. If you aren't a master at either, worry not. Neither am I. So if I can figure this out, so can you. I have segmented the \r\n\r\n  - Part 0 - The Framework\r\n  - Part I - The Server\r\n  - Part II - The Client - A Simple Plot using `plotly.js`\r\n  - Part III - Communication between the server and the client.\r\n  - Part IV - Creating a New Display using the Framework\r\n\r\n## Part 0 - Creating a framework\r\n\r\nNote: you can downliad the entire framework [here](https://github.com/sankhaMukherjee/tutorial-AngularJS/tree/master/framework).\r\n\r\nYes I know, the Romans didn't invent zero. Deal with it. Now lets get on with creating a framework.\r\n\r\n### The folder structure\r\n\r\nThis is only a recommendation. There is no particular need to separate folders in this manner. The only reason for doing this is to understand that the `server` and the `client` are distinct and have no inherent commonality between them. So the folder structure helps forms a mental disconnect between the server and the client.\r\n\r\nWe shall call the current folder the `framework` folder (for reasons that shall become obvious to us in a little bit), and create two folders in it called the `server` and `client`.  \r\n\r\n### The framework\r\n\r\nAt this time, we shall create a <font color='indianred'>framework</font>. Real frameworks are much more complicated. However, for *our* purposes, this will comprise of a folder with a bunch of folders, subfolders, and files arranged in a convenient manner. At any time, when we wish to replicate and create a similar task, we can just copy the entire folder to another location, rename it, and off we go creating our new application. So create a folder structure that looks like the following ...\r\n\r\n```bash\r\n.\r\n└── framework\r\n    ├── Readme.md\r\n    ├── client\r\n    │   ├── angular.min.js\r\n    │   ├── jquery-2.1.4.min.js\r\n    │   └── plotly-latest.min.js\r\n    └── server\r\n        ├── bottle.py\r\n        └── data.csv\r\n```\r\n\r\n\r\nSo `Readme.md` is this file that you are reading. The rest of the files may be downloaded from their respective websites:\r\n\r\n - `angular.min.js` from [here][angularJS]\r\n - `jquery-2.1.4.min.js` from [here][jquery] (you can get whatever is the latest version)\r\n - `plotly-latest.min.js` from [here][plotly]\r\n - `bottle.py` from [here][bottle] (if you want, you can install `bottle`, in which case you don't need this file).\r\n\r\nAt this point, I assume that you have Python 2.7 installed on your system, along with the [Pandas][pandas] library. \r\n\r\nIn this tutorial, we shall go through several technologies. This tutorial is by no means a comprehensive overview of *any* of the technologies described. I hope that, by going through these tutorials, you get familiarized with a number of freely available technologies and realize that developing visualization technologies are not magical. Furthermore, I hope that these tutorials will allow you to push you to extend your understanding of Web Technolonoes.\r\n\r\n## Part I - The Server\r\n\r\nThere is some communication between the `server` and the `client`. The communication is <font color='indianred'>asynchronous</font> which simply means that there is no shared clock between the server and the client. The `client` can request information *at any time* and the \r\n\r\n\r\n### The server\r\n\r\nThe server is pretty simple. We will use the [bottle Web Framework][bottle] to create a simple server. If you dont have the patience to install the bottle Framework, just download the [`bottle.py`][bottleFile] file and put it in your folder. \r\n\r\nThe reason most people shy away from programming even rudimentary communication protocols is because traditionally they have been programmed with C or some similar variant. Those days are long gone. You can literally create a server in 3 lines of code. Yes. Really just 3 lines of code. \r\n\r\nSo, lets get started ...\r\n\r\nGo to the folder named server and create a Python file called `server.py`. The folder structure should now look like this:\r\n\r\n```bash\r\n.\r\n└── framework\r\n    ├── Readme.md\r\n    ├── client\r\n    │   ├── angular.min.js\r\n    │   ├── jquery-2.1.4.min.js\r\n    │   └── plotly-latest.min.js\r\n    └── server\r\n        ├── data.csv\r\n        └── server.py\r\n```\r\n\r\nAnd within the file `server.py`, paste the following code. \r\n\r\n```python\r\nimport bottle\r\napp = bottle.Bottle()\r\nbottle.run(app, host='localhost', port=8080)\r\n```\r\n\r\nI promised you 3 lines. There they are. You can shorten it to 2 by not including the second line, but that second line allows us significant advantages *which will not be apparent you you at this moment*. But don't be lazy. Put that one line in anyway. \r\n\r\nThis is not supposed to be a bottle tutorial. You can go through many tutorials on YouTube to learn bottle. I shall only cover the absolute basics that is necessary for this tutorial. Remember though that I assume you have a passing familiarity with Python programming. What is the program doing?\r\n\r\n - The first line just imports the library. \r\n - The second like creates a `Bottle` instance and we call it `app`. You can think of `Bottle` as the equivalent of a Class. And `app` is an instance if that class. \r\n - The third line executes the `run` method of the `Bottle` class. This creates a <font color='indianred'>listener</font>. This function waits for other programs to send it requests at the <font color='indianred'>IP address</font> `127.0.0.1` (or `localhost`)\r\n\r\nNow open your terminal go to the server folder, and run the following command:\r\n\r\n```bash\r\nSankha-desktop:server user$ python server.py\r\nBottle server starting up (using WSGIRefServer())...\r\nListening on http://localhost:8080/\r\nHit Ctrl-C to quit.\r\n```\r\nThe server at this moment is <font color='indianred'> listening </font> for requests. We have not specified how it is going to <font color='indianred'> process </font> any requests sent to it. But we can test whether the server is listening to anything. Open your favorite web browser, and go to the address `http://localhost:8080/`. You should see something like the below text on your terminal:\r\n\r\n```bash\r\n127.0.0.1 - - [08/Feb/2016 07:12:03] \"GET / HTTP/1.1\" 404 720\r\n127.0.0.1 - - [08/Feb/2016 07:12:03] \"GET /favicon.ico HTTP/1.1\" 404 742\r\n127.0.0.1 - - [08/Feb/2016 07:12:03] \"GET /apple-touch-icon-precomposed.png HTTP/1.1\" 404 784\r\n127.0.0.1 - - [08/Feb/2016 07:12:03] \"GET /apple-touch-icon.png HTTP/1.1\" 404 760\r\n```\r\nAnd the following on your browser:\r\n\r\n![Imgur](http://i.imgur.com/8waZZKB.png?1)\r\n\r\nThis says that the browser sent a <font color='indianred'>request</font> at `http://localhost:8080`. The request was `/`. And the server did not know what to do with it. So, lets add a behavior to `/` ...\r\n\r\n```python\r\nimport bottle\r\n\r\napp = bottle.Bottle()\r\n\r\n@app.route('/')\r\ndef fn(): return 'Hello World!!'\r\n\r\nbottle.run(app)\r\n```\r\n\r\nThe the code snippet above (lines 5,6), we are <font color='indianred'>routing</font> the request `/` to the function `fn()`. The name of the function is immaterial. We are just returning a simple string. We can return an entire webpage if we wished. However, we choose to just return a simple string. Now, restart the server, and try requesting the page again.\r\n\r\nIt should show the following:\r\n\r\n![Imgur](http://i.imgur.com/8ySvFxR.png?1)\r\n\r\nSo, it can show the text you sent over ...\r\n\r\n\r\n```python\r\nimport bottle\r\nimport json\r\nimport pandas as pd \r\n\r\napp = bottle.Bottle()\r\n\r\n@app.route('/')\r\ndef fn(): return 'Hello World!!'\r\n\r\n@app.route('/data')\r\ndef fn1():\r\n    temp = pd.read_csv('data.csv')\r\n    data = dict((c, list(temp[c])) for c in temp.columns)\r\n    return json.dumps(data)\r\n\r\nbottle.run(app)\r\n```\r\n\r\nThere is only a single function of interest: `fn1()`, which is routed to `http://127.0.0.1:8080/data`. This reads the CSV file `data.scv` and returns a JSON string corresponding to that. Now if you point your browser to `http://127.0.0.1:8080/data`, you will see the JSON string which has been transferred over. \r\n\r\nIt will look like the following ...\r\n\r\n![Imgur](http://i.imgur.com/79O2Z5u.png?1)\r\n\r\nThere is one more thing that you need to do, simply for security reasons. You need to set up your CORS settings. Dont worry about what that does. You can read all about it [here][CORS]. Simply update the server code with an <font color='indianred'>after request hook</font> by adding the following code.\r\n\r\n```python\r\n\r\n@app.hook('after_request')\r\ndef enable_cors():\r\n    bottle.response.headers['Access-Control-Allow-Origin'] = '*'\r\n    bottle.response.headers['Access-Control-Allow-Methods'] = 'PUT, GET, POST, DELETE, OPTIONS'\r\n    bottle.response.headers['Access-Control-Allow-Headers'] = 'Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Token'\r\n    \r\n``` \r\n \r\nYour final program should look like this ...\r\n\r\n```python\r\nimport bottle\r\nimport json\r\nimport pandas as pd \r\n\r\napp = bottle.Bottle()\r\n\r\n@app.hook('after_request')\r\ndef enable_cors():\r\n    bottle.response.headers['Access-Control-Allow-Origin'] = '*'\r\n    bottle.response.headers['Access-Control-Allow-Methods'] = 'PUT, GET, POST, DELETE, OPTIONS'\r\n    bottle.response.headers['Access-Control-Allow-Headers'] = 'Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Toke\r\n\r\n@app.route('/')\r\ndef fn():\r\n    return 'Hello World!!'\r\n\r\n@app.route('/data')\r\ndef fn1():\r\n    temp = pd.read_csv('data.csv')\r\n    data = {}\r\n    for c in temp.columns:\r\n        data[c] = list(temp[c])\r\n\r\n    return json.dumps(data)\r\n\r\nbottle.run(app)\r\n```\r\n\r\nAnd thats it. On the next post, I shall explain how to set up your client using Plotly and angularJS.\r\n\r\n### The client\r\n\r\nNow lets get on with our client. This is the interesting part. We shall create a client using `angular.js` and will later display it with `plotly.js`. \r\n\r\n### References:\r\n\r\n#### Python libraries:\r\n\r\n1. The [Bottle Web Framework][bottle].\r\n3. The [Pandas][pandas] library.\r\n\r\n#### Javascript libraries\r\n\r\n1. A copy of the [angular**JS**] [angularJS] file may be downloaded from here.\r\n2. A copy of plotly.js may be downloaded from here\r\n\r\n#### Other misc. references\r\n\r\n\r\n3. [The Bedroom Programmer][tutorial-aJS-directives]'s tutorial on AngularJS and custom directives proved to be invaluable ....\r\n\r\n[CORS]: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\r\n[tutorial-aJS-directives]: http://thebedroomprogrammer.blogspot.sg/2015/09/implementing-custom-directives-in.html\r\n[angularJS]: https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0-rc.2/angular.min.js \"Angular JS Link\"\r\n[bottle]: http://bottlepy.org/docs/dev/index.html\r\n[bottleFile]:https://github.com/bottlepy/bottle/raw/master/bottle.py\r\n[jquery]:https://jquery.com\r\n[pandas]: http://pandas.pydata.org/index.html\r\n[plotly]:https://plot.ly/javascript/getting-started/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}